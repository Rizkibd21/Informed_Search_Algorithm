# -*- coding: utf-8 -*-
"""A* graph search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_kxc7F-xM6UmWRWCgbDaOMf1IM5akqKz
"""

from queue import PriorityQueue

# Fungsi untuk algoritma A* Graph Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((0, start))  # Menambahkan simpul awal ke dalam antrian dengan nilai prioritas 0
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    # Initialize path as a dictionary within the function scope
    path = {}  # Dictionary untuk menyimpan jalur terpendek
    while not frontier.empty():
        _, current_node = frontier.get()  # Mengambil simpul dengan nilai prioritas terendah dari antrian

        if current_node == goal:
            print("Goal node Found!")
            route = reconstruct_path(path, start, goal)
            print("Route Optimal:", route)
            return True  # Mengembalikan True jika simpul tujuan sudah ditemukan


        for neighbor, cost in graph[current_node].items():
            priority = heuristic[neighbor] + cost
            frontier.put((priority, neighbor))
            path[neighbor] = current_node

    print("Goal node not found!")
    return False  # Mengembalikan False jika simpul tujuan tidak ditemukan

# ... (rest of your code remains the same) ...

def a_star_graph_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((0, start))  # Menambahkan simpul awal ke dalam antrian dengan nilai prioritas 0
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}  # Dictionary untuk menyimpan jalur terpendek
    while not frontier.empty():
        _, current_node = frontier.get()  # Mengambil simpul dengan nilai prioritas terendah dari antrian

        if current_node == goal:
            print("Goal node Found!")
            route = reconstruct_path(path, start, goal)
            print("Route Optimal:", route)
            return True  # Mengembalikan True jika simpul tujuan sudah ditemukan

        explored.add(current_node)  # Menandai simpul saat ini sebagai sudah dieksplorasi

        for neighbor, cost in graph[current_node].items():
            priority = heuristic[neighbor] + cost
            frontier.put((priority, neighbor))
            path[neighbor] = current_node

    print("Goal node not found!")
    return False  # Mengembalikan False jika simpul tujuan tidak ditemukan

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf (dalam bentuk daftar kejadian)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 1, 'D': 5},
    'B': {'C': 2, 'D': 3},
    'C': {'D': 3, 'G': 4},
    'D': {'G': 1},
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi A* Search
a_star_search(graph, start_node, goal_node, heuristic)